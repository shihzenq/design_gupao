策略设计模式：它将定义的算法家族、分别封装起来，让它们之间可以互相替换，从而让算法的变化不会影响到使用算法的用户。
策略模式适用于以下场景：
1、针对同一类型问题，有多种处理方式，每一种都能独立解决问题
2、算法需要自由切换的场景
3、需要屏蔽算法规则的场景

分三个角色：
上下文角色：用来操作策略的上下文环境，屏蔽高层模块(客户端)对策略，算法的直接访问，封装可能存在的变化；
抽象策略角色：规定策略或算法的行为；
具体策略角色：具体的策略或算法实现。
